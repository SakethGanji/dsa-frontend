import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { 
  Database,
  History,
  BarChart3,
  Plus,
  Play,
  FileText,
  Eye
} from "lucide-react"
import { useDatasetContext } from "@/contexts/DatasetContext"
import { useExploreDataset } from "@/hooks"
import { createProfileRequest } from "@/hooks/use-exploration-query"
import { useQuery } from "@tanstack/react-query"
import { cn } from "@/lib/utils"
import { SectionCard, CollapsibleSection, DatasetVersionSelector } from "@/components/shared"
import { ExplorationHistoryTable } from "./exploration-history-table"
import { DataPreviewTable } from "./data-preview-table"

interface ExplorationDashboardProps {
  datasetId?: number
  versionId?: number
  className?: string
}

const analysisOptions = [
  {
    id: "pandas",
    name: "YData Profile",
    description: "Auto-generated by YData. A fast, standardized summary of your dataset with key stats and distributions.",
    icon: BarChart3,
  },
]

export function ExplorationDashboard({
  datasetId: initialDatasetId,
  className
}: ExplorationDashboardProps) {
  // Global dataset context
  const { selectedDataset, setSelectedDataset, selectedVersion, setSelectedVersion } = useDatasetContext()
  
  // Local state
  const [isAnalyzeExpanded, setIsAnalyzeExpanded] = useState(false)
  const [selectedAnalysis, setSelectedAnalysis] = useState<string | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [showResults, setShowResults] = useState(false)
  
  // Hooks
  const exploreMutation = useExploreDataset<{ profile?: string }>()
  
  // Fetch table data for preview
  const { data: tableData, isLoading: tableLoading } = useQuery({
    queryKey: ['dataset-preview', selectedDataset?.id, selectedVersion?.id],
    queryFn: async () => {
      if (!selectedDataset || !selectedVersion) return null
      const response = await fetch(
        `${import.meta.env.VITE_API_URL || 'http://127.0.0.1:8000'}/api/datasets/${selectedDataset.id}/versions/${selectedVersion.id}/data?limit=10&offset=0`,
        {
          headers: {
            'Accept': 'application/json',
            'Authorization': `Bearer ${JSON.parse(localStorage.getItem('auth_tokens') || '{}').access_token}`
          }
        }
      )
      if (!response.ok) throw new Error('Failed to fetch data')
      return response.json()
    },
    enabled: !!selectedDataset && !!selectedVersion,
  })
  
  // Initialize from props if provided
  useEffect(() => {
    if (initialDatasetId && !selectedDataset) {
      // Would need to fetch dataset details here
      // For now, we'll rely on the context being set elsewhere
    }
  }, [initialDatasetId, selectedDataset])
  
  const handleRunAnalysis = (analysisId: string) => {
    setSelectedAnalysis(analysisId)
    
    if (analysisId === 'pandas' && selectedDataset && selectedVersion) {
      setIsAnalyzing(true)
      
      exploreMutation.mutate({
        datasetId: selectedDataset.id,
        versionId: selectedVersion.id,
        options: createProfileRequest('html')
      }, {
        onSuccess: () => {
          setIsAnalyzing(false)
          setShowResults(true)
          setIsAnalyzeExpanded(false)
        },
        onError: () => {
          setIsAnalyzing(false)
        }
      })
    }
  }
  
  const showEmptyState = !selectedDataset || !selectedVersion
  
  return (
    <div className={cn("w-full", className)}>
      {/* Header Section with Dataset Selector */}
      <div className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container mx-auto px-6 py-4">
          <div className="flex flex-col gap-4">
            <DatasetVersionSelector
              selectedDataset={selectedDataset}
              selectedVersion={selectedVersion}
              onDatasetChange={setSelectedDataset}
              onVersionChange={setSelectedVersion}
            />
          </div>
        </div>
      </div>
      
      {/* Main Content Area */}
      <div className="container mx-auto px-6 py-6">
        {showEmptyState ? (
          /* Enhanced Empty State */
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.4 }}
          >
            <Card className="border-dashed border-2 shadow-none">
              <CardContent className="flex flex-col items-center justify-center py-24 px-8 text-center">
                <div className="relative mb-8">
                  <div className="absolute inset-0 bg-primary/20 blur-3xl rounded-full" />
                  <div className="relative inline-flex items-center justify-center w-20 h-20 rounded-full bg-primary/10">
                    <Database className="w-10 h-10 text-primary" />
                  </div>
                </div>
                <h3 className="text-2xl font-semibold mb-3">No Dataset Selected</h3>
                <p className="text-muted-foreground max-w-md mb-6 leading-relaxed">
                  Select a dataset and version from the dropdown above to start exploring 
                  your data and run analyses.
                </p>
                <div className="flex items-center gap-4 text-sm text-muted-foreground">
                  <div className="flex items-center gap-2">
                    <Eye className="w-4 h-4" />
                    <span>Preview data</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <BarChart3 className="w-4 h-4" />
                    <span>Run analyses</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <History className="w-4 h-4" />
                    <span>View history</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        ) : (
          <div className="space-y-6">
            {/* Quick Actions Bar */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Database className="w-4 h-4" />
                <span className="font-medium">{selectedDataset.name}</span>
                <span>/</span>
                <span>v{selectedVersion.version_number}</span>
              </div>
              <Button
                onClick={() => {
                  setIsAnalyzeExpanded(true)
                  setTimeout(() => {
                    const analyzeSection = document.getElementById('analyze-section')
                    analyzeSection?.scrollIntoView({ behavior: 'smooth', block: 'start' })
                  }, 100)
                }}
                size="sm"
                className="gap-2"
              >
                <Play className="w-4 h-4" />
                Run Analysis
              </Button>
            </div>
            
            {/* Data Preview Section */}
            <SectionCard
              icon={Eye}
              iconColor="text-muted-foreground"
              title="Data Preview"
              description="First 10 rows of your dataset"
              badge={tableData?.headers?.length ? `${tableData.headers.length} columns` : undefined}
            >
              <DataPreviewTable
                data={tableData}
                isLoading={tableLoading}
              />
            </SectionCard>
            
            {/* Analysis History Section */}
            <SectionCard
              icon={History}
              iconColor="text-muted-foreground"
              title="Analysis History"
              description="Previous analyses run on this dataset"
            >
              <ExplorationHistoryTable
                datasetId={selectedDataset.id}
                versionId={selectedVersion.id}
                onAnalysisSelect={(analysis) => {
                  console.log('Selected analysis:', analysis)
                  // Handle viewing previous analysis
                }}
              />
            </SectionCard>
            
            {/* Run New Analysis Section */}
            <CollapsibleSection
              icon={Plus}
              title="Run New Analysis"
              description="Choose an analysis method to gain insights"
              defaultExpanded={isAnalyzeExpanded}
              onToggle={setIsAnalyzeExpanded}
            >
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {analysisOptions.map((option) => {
                  const Icon = option.icon
                  return (
                    <motion.div
                      key={option.id}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <Card
                        className="cursor-pointer hover:shadow-md hover:border-primary/30 transition-all duration-200"
                        onClick={() => handleRunAnalysis(option.id)}
                      >
                        <CardContent className="p-4">
                          <div className="flex items-start gap-3">
                            <div className="p-2 bg-primary/10 rounded-lg">
                              <Icon className="w-5 h-5 text-primary" />
                            </div>
                            <div className="flex-1">
                              <h3 className="font-medium text-sm mb-1">{option.name}</h3>
                              <p className="text-xs text-muted-foreground leading-relaxed">
                                {option.description}
                              </p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </motion.div>
                  )
                })}
              </div>
              {isAnalyzing && (
                <div className="mt-4 p-4 bg-muted/50 rounded-lg text-center">
                  <div className="inline-block h-6 w-6 animate-spin rounded-full border-2 border-solid border-primary border-r-transparent mb-2" />
                  <p className="text-sm text-muted-foreground">Running analysis...</p>
                </div>
              )}
            </CollapsibleSection>
            
            {/* Analysis Results */}
            {showResults && exploreMutation.data && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
              >
                <SectionCard
                  icon={FileText}
                  iconColor="text-green-600"
                  title="Analysis Results"
                  description="YData Profile results"
                  badge="Completed"
                  badgeVariant="default"
                >
                  <div className="border rounded-lg bg-white">
                    <iframe 
                      srcDoc={(exploreMutation.data as { profile?: string })?.profile || ''} 
                      title="Dataset Profile" 
                      className="w-full min-h-[800px] border-0"
                      sandbox="allow-scripts allow-same-origin"
                    />
                  </div>
                </SectionCard>
              </motion.div>
            )}
          </div>
        )}
      </div>
    </div>
  )
}